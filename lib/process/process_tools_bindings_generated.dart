// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Regenerate bindings with `dart run ffigen --config process.yaml`.
///
class ProcessToolsListBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ProcessToolsListBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ProcessToolsListBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// Get process PID by name, returns 0 if failed
  int get_pid_by_name(ffi.Pointer<ffi.Char> process_name) {
    return _get_pid_by_name(process_name);
  }

  late final _get_pid_by_namePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'get_pid_by_name',
      );
  late final _get_pid_by_name =
      _get_pid_by_namePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// Get process PID by port number, returns 0 if failed
  int get_pid_by_port(int port) {
    return _get_pid_by_port(port);
  }

  late final _get_pid_by_portPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('get_pid_by_port');
  late final _get_pid_by_port =
      _get_pid_by_portPtr.asFunction<int Function(int)>();

  /// Check if port is in use, returns 1 if in use, 0 if not
  int is_port_in_use(int port) {
    return _is_port_in_use(port);
  }

  late final _is_port_in_usePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('is_port_in_use');
  late final _is_port_in_use =
      _is_port_in_usePtr.asFunction<int Function(int)>();

  /// Get process path by PID, returns path if successful, empty string if failed
  ffi.Pointer<ffi.Char> get_pid_by_path(int pid) {
    return _get_pid_by_path(pid);
  }

  late final _get_pid_by_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
        'get_pid_by_path',
      );
  late final _get_pid_by_path =
      _get_pid_by_pathPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();
}
